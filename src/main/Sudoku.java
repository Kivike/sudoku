package main;

/**
 * Sudoku entity
 * Holds the data for sudoku's 9x9 cells
 *
 * Generated by SudokuFactory
 */
public class Sudoku {
    private SudokuCell[][] cells;

    public enum Difficulty {
        EASY(81-32, "Easy"),
        MEDIUM(81-27, "Medium"),
        HARD(81-22, "Hard");

        private final int difficulty;
        private final String name;

        Difficulty(int difficulty, String name) {
            this.difficulty = difficulty;
            this.name = name;
        }
        public int getValue() { return difficulty; }
        public String getName() { return name; }

    };

    public Sudoku() {
        cells = new SudokuCell[9][];

        // Used for creating linked list
        SudokuCell prevCell = null;

        // Initialize all the 9x9 cells
        for(int i = 0; i < cells.length; i++) {
            cells[i] = new SudokuCell[9];

            for(int j = 0; j < cells.length; j++) {
                SudokuCell cell = new SudokuCell(i, j);
                cells[i][j] = cell;

                if(prevCell != null) {
                    // Link cells with doubly linked list for
                    // fast propagation when filling values
                    prevCell.setNextCell(cell);
                    cell.setPreviousCell(prevCell);
                }

                prevCell = cell;
            }
        }
    }

    public SudokuCell getCellAt(int row, int column) {
        return cells[row][column];
    }

    public void setCellAt(int row, int column, SudokuCell cell) {
        cells[row][column] = cell;
    }

    /**
     * Create a deep copy of sudoku
     * @return
     */
    public Sudoku copy() {
        Sudoku copy = new Sudoku();

        for(int row = 0; row < 9; row++) {
            for(int column = 0; column < 9; column++) {
                copy.setCellAt(row, column, cells[row][column].copy());
            }
        }

        return copy;
    }

    /**
     * Check if row contains value
     * @param row Row to test
     * @param value Value of the cell
     * @return Returns true if the number is found on the row
     */
    public boolean rowContains(int row, int value) {
        // Check every cell of the row
        for(int i = 0; i < 9; i++) {

            if(value == cells[row][i].getValue()) {
                return true;
            }
        }

        return false;
    }

    /**
     * Check if column contains value
     * @param column Column to test
     * @param value Value of the cell
     * @return Returns true if the number found on the column
     */
    public boolean columnContains(int column, int value) {
        for(int i = 0; i < 9; i++) {

            if(value == cells[i][column].getValue()) {
                return true;
            }
        }

        return false;
    }

    // Test 3x3 square with same value
    public boolean bigSquareContains(int row, int column, int value) {
        // 3x3 row/column
        int startRow = (row / 3) * 3;
        int startColumn = (column / 3) * 3;

        for(int testRow = startRow; testRow < startRow + 3; testRow++) {
            for(int testColumn = startColumn; testColumn < startColumn + 3; testColumn++) {
                if(testRow == row && testColumn == column) continue;

                if(cells[testRow][testColumn].getValue() == value) {
                    return true;
                }
            }
        }
        return false;
    }

    /**
     * Test if cell can have given value
     * @param cell Cell to test
     * @param value Value to test the cell with
     * @return  Returns true if cell is allowed to have given value
     */
    public boolean testCellWithValue(SudokuCell cell, int value) {
        int row = cell.getRow();
        int column = cell.getColumn();

        //System.out.printf("Test %d %d %d\n", row, column, value);

        // Return true if the value passes all the sudoku rules
        // (no same number on same row, column or in same 3x3 square)
        return !(rowContains(row, value) || columnContains(column,value) ||
                bigSquareContains(row, column, value));
    }

    private static int[] getSquareIndex(int x, int y) {
        int[] ar = new int[2];
        ar[0] = (x / 3);
        ar[1] = (y / 3);
        return ar;
    }

    public SudokuCell[][] getCells() {
        return cells;
    }

    public String toString() {
        StringBuilder strBuilder = new StringBuilder();

        for(int i = 0; i < cells.length; i++) {
            for(int j = 0; j < cells[i].length; j++) {
                strBuilder.append(cells[i][j].getValue());
                strBuilder.append(" ");

                if(j == cells[i].length - 1) {
                    strBuilder.append("\n");
                }
            }
        }

        return strBuilder.toString();
    }
}
